return {
  "nvim-lualine/lualine.nvim",
  event = "VeryLazy",
  config = function()
    local colors = {
      blue = "#04d1f9",
      green = "#37f499",
      purple = "#a48cf2",
      cyan = "#56b6c2",
      red1 = "#f16c75",
      red2 = "#be5046",
      yellow = "#f7c67f",
      fg = "#212337",
      bg = "#212337",
      gray1 = "#828997",
      gray2 = "#2c323c",
      gray3 = "#3e4452",
    }

    local env_var_nvim_theme = os.getenv "NVIM_THEME" or "nord"

    local onedark_theme = {
      normal = {
        a = { fg = colors.fg, bg = colors.green, gui = "bold" },
        b = { fg = colors.fg, bg = colors.gray3 },
        c = { fg = colors.fg, bg = colors.gray2 },
      },
      command = { a = { fg = colors.fg, bg = colors.yellow, gui = "bold" } },
      insert = { a = { fg = colors.fg, bg = colors.blue, gui = "bold" } },
      visual = { a = { fg = colors.fg, bg = colors.purple, gui = "bold" } },
      terminal = { a = { fg = colors.fg, bg = colors.cyan, gui = "bold" } },
      replace = { a = { fg = colors.fg, bg = colors.red1, gui = "bold" } },
      inactive = {
        a = { fg = colors.gray1, bg = colors.bg, gui = "bold" },
        b = { fg = colors.gray1, bg = colors.bg },
        c = { fg = colors.gray1, bg = colors.gray2 },
      },
    }

    local themes = {
      onedark = onedark_theme,
      nord = "nord",
    }

    local function get_permissions_color()
      local file = vim.fn.expand "%:p"
      if file == "" or file == nil then
        return "No File", "#04d1f0" -- Default blue for no or non-existing file
      else
        local permissions = vim.fn.getfperm(file)
        -- Check only the first three characters for 'rwx' to determine owner permissions
        local owner_permissions = permissions:sub(1, 3)
        -- green for owner 'rwx', blue otherwise
        return permissions, owner_permissions == "rwx" and "#37f499" or "#04d1f9"
      end
    end

    -- Decide background color based on hostname's last character
    -- These colors match my starship profile
    local function decide_color()
      local hostname = vim.fn.systemlist("hostname")[1]
      local last_char = hostname:sub(-1)
      local bg_color = colors.purple

      if last_char == "1" then
        bg_color = colors.green
      elseif last_char == "2" then
        bg_color = colors.red1
      elseif last_char == "3" then
        bg_color = colors.yellow
      end

      return bg_color
    end

    -- Hostname component with dynamically decided background color
    local bg_color = decide_color()
    -- Function to check spelling status and determine background color
    local mode = {
      "mode",
      fmt = function(str)
        -- return ' ' .. str:sub(1, 1) -- displays only the first character of the mode
        return " " .. str
      end,
    }

    local hide_in_width = function()
      return vim.fn.winwidth(0) >= 100
    end

    local diff = {
      "diff",
      colored = false,
      symbols = { added = " ", modified = " ", removed = " " }, -- changes diff symbols
      cond = hide_in_width,
    }

    local filename = {
      "filename",
      file_status = true, -- displays file status (readonly status, modified status)
      path = 0, -- 0 = just filename, 1 = relative path, 2 = absolute path
    }

    local diagnostics = {
      "diagnostics",
      sources = { "nvim_diagnostic" },
      sections = { "error", "warn" },
      symbols = { error = " ", warn = " ", info = " ", hint = " " },
      colored = false,
      update_in_insert = false,
      always_visible = false,
      cond = hide_in_width,
    }

    require("lualine").setup {

      options = {
        icons_enabled = true,
        theme = themes[env_var_nvim_theme], -- Set theme based on environment variable
        -- Some useful glyphs:
        -- https://www.nerdfonts.com/cheat-sheet
        --        
        section_separators = { left = "", right = "" },
        component_separators = { left = "", right = "" },
        disabled_filetypes = { "alpha", "neo-tree" },
        always_divide_middle = true,
      },
      sections = {
        lualine_a = { mode },
        lualine_b = {
          { "branch" },
          {
            function()
              return vim.g.remote_neovim_host and ("Remote: %s"):format(vim.uv.os_gethostname()) or ""
            end,
            padding = { right = 1, left = 1 },
            separator = { left = "", right = "" },
          },
        },
        lualine_c = { filename },
        lualine_x = {
          { diagnostics, diff, { "encoding", cond = hide_in_width }, { "filetype", cond = hide_in_width } },
          -- {
          --   "hostname",
          --   color = { fg = colors.fg, bg = bg_color, gui = "bold" },
          --   separator = { left = "█", right = "" },
          --   padding = 0,
          -- },
          -- {
          --   function()
          --     if vim.bo.filetype ~= "markdown" then
          --       local permissions, _ = get_permissions_color() -- Ignore bg_color here if unused
          --       return permissions
          --     else
          --       return ""
          --     end
          --   end,
          --   color = function()
          --     if vim.bo.filetype ~= "markdown" then
          --       local _, permissions_bg_color = get_permissions_color() -- Use bg_color for dynamic coloring
          --       return { fg = colors.fg, bg = permissions_bg_color, gui = "bold" }
          --     else
          --       return { fg = colors.fg, bg = bg_color, gui = "bold" } -- Default color when markdown
          --     end
          --   end,
          --   separator = { left = "█", right = "█ " },
          --   padding = 0,
          -- },
        },

        lualine_y = {
          { "location" },
          -- { "progress", separator = " ", padding = { left = 1, right = 0 } },
          -- { "location", padding = { left = 0, right = 1 } },
        },
        lualine_z = { "progress" },
      },
      inactive_section = {
        lualine_a = {},
        lualine_b = {},
        lualine_c = { { "filename", path = 1 } },
        lualine_x = { { "location", padding = 0 } },
        lualine_y = {},
        lualine_z = {},
      },
      tabline = {},
      extensions = { "fugitive" },
    }
  end,
}
